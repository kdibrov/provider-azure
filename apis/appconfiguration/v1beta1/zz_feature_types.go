/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FeatureObservation struct {

	// The App Configuration Feature ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FeatureParameters struct {

	// Specifies the id of the App Configuration. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/appconfiguration/v1beta1.Configuration
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ConfigurationStoreID *string `json:"configurationStoreId,omitempty" tf:"configuration_store_id,omitempty"`

	// Reference to a Configuration in appconfiguration to populate configurationStoreId.
	// +kubebuilder:validation:Optional
	ConfigurationStoreIDRef *v1.Reference `json:"configurationStoreIdRef,omitempty" tf:"-"`

	// Selector for a Configuration in appconfiguration to populate configurationStoreId.
	// +kubebuilder:validation:Optional
	ConfigurationStoreIDSelector *v1.Selector `json:"configurationStoreIdSelector,omitempty" tf:"-"`

	// The description of the App Configuration Feature.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The status of the App Configuration Feature. By default, this is set to false.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// The label of the App Configuration Feature.  Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// Should this App Configuration Feature be Locked to prevent changes?
	// +kubebuilder:validation:Optional
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// The name of the App Configuration Feature. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// A list of one or more numbers representing the value of the percentage required to enable this feature.
	// +kubebuilder:validation:Optional
	PercentageFilterValue *float64 `json:"percentageFilterValue,omitempty" tf:"percentage_filter_value,omitempty"`

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A targeting_filter block as defined below.
	// +kubebuilder:validation:Optional
	TargetingFilter []TargetingFilterParameters `json:"targetingFilter,omitempty" tf:"targeting_filter,omitempty"`

	// A targeting_filter block timewindow_filter as defined below.
	// +kubebuilder:validation:Optional
	TimewindowFilter []TimewindowFilterParameters `json:"timewindowFilter,omitempty" tf:"timewindow_filter,omitempty"`
}

type GroupsObservation struct {
}

type GroupsParameters struct {

	// The name of the App Configuration Feature. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Rollout percentage of the group.
	// +kubebuilder:validation:Required
	RolloutPercentage *float64 `json:"rolloutPercentage" tf:"rollout_percentage,omitempty"`
}

type TargetingFilterObservation struct {
}

type TargetingFilterParameters struct {

	// A number representing the percentage of the entire user base.
	// +kubebuilder:validation:Required
	DefaultRolloutPercentage *float64 `json:"defaultRolloutPercentage" tf:"default_rollout_percentage,omitempty"`

	// One or more blocks of type groups as defined below.
	// +kubebuilder:validation:Optional
	Groups []GroupsParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	// A list of users to target for this feature.
	// +kubebuilder:validation:Optional
	Users []*string `json:"users,omitempty" tf:"users,omitempty"`
}

type TimewindowFilterObservation struct {
}

type TimewindowFilterParameters struct {

	// The latest timestamp the feature is enabled.  The timestamp must be in RFC3339 format.
	// +kubebuilder:validation:Optional
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	// The earliest timestamp the feature is enabled. The timestamp must be in RFC3339 format.
	// +kubebuilder:validation:Optional
	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

// FeatureSpec defines the desired state of Feature
type FeatureSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FeatureParameters `json:"forProvider"`
}

// FeatureStatus defines the observed state of Feature.
type FeatureStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FeatureObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Feature is the Schema for the Features API. Manages an Azure App Configuration Feature.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type Feature struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FeatureSpec   `json:"spec"`
	Status            FeatureStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FeatureList contains a list of Features
type FeatureList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Feature `json:"items"`
}

// Repository type metadata.
var (
	Feature_Kind             = "Feature"
	Feature_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Feature_Kind}.String()
	Feature_KindAPIVersion   = Feature_Kind + "." + CRDGroupVersion.String()
	Feature_GroupVersionKind = CRDGroupVersion.WithKind(Feature_Kind)
)

func init() {
	SchemeBuilder.Register(&Feature{}, &FeatureList{})
}
