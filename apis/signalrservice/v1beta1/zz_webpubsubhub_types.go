/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthObservation struct {
}

type AuthParameters struct {

	// Specify the identity ID of the target resource.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/managedidentity/v1beta1.UserAssignedIdentity
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ManagedIdentityID *string `json:"managedIdentityId,omitempty" tf:"managed_identity_id,omitempty"`

	// Reference to a UserAssignedIdentity in managedidentity to populate managedIdentityId.
	// +kubebuilder:validation:Optional
	ManagedIdentityIDRef *v1.Reference `json:"managedIdentityIdRef,omitempty" tf:"-"`

	// Selector for a UserAssignedIdentity in managedidentity to populate managedIdentityId.
	// +kubebuilder:validation:Optional
	ManagedIdentityIDSelector *v1.Selector `json:"managedIdentityIdSelector,omitempty" tf:"-"`
}

type EventHandlerObservation struct {
}

type EventHandlerParameters struct {

	// An auth block as defined below.
	// +kubebuilder:validation:Optional
	Auth []AuthParameters `json:"auth,omitempty" tf:"auth,omitempty"`

	// Specify the list of system events. Supported values are connect, connected and disconnected.
	// +kubebuilder:validation:Optional
	SystemEvents []*string `json:"systemEvents,omitempty" tf:"system_events,omitempty"`

	// The Event Handler URL Template. Two predefined parameters {hub} and {event} are available to use in the template. The value of the EventHandler URL is dynamically calculated when the client request comes in. Example: http://example.com/api/{hub}/{event}.
	// +kubebuilder:validation:Required
	URLTemplate *string `json:"urlTemplate" tf:"url_template,omitempty"`

	// Specify the matching event names. There are 3 kind of patterns supported: * * matches any event name * , Combine multiple events with , for example event1,event2, it matches event event1 and event2 * The single event name, for example event1, it matches event1.
	// +kubebuilder:validation:Optional
	UserEventPattern *string `json:"userEventPattern,omitempty" tf:"user_event_pattern,omitempty"`
}

type WebPubsubHubObservation struct {

	// The ID of the Web Pubsub Hub resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type WebPubsubHubParameters struct {

	// Is anonymous connections are allowed for this hub? Defaults to false.
	// Possible values are true, false.
	// +kubebuilder:validation:Optional
	AnonymousConnectionsEnabled *bool `json:"anonymousConnectionsEnabled,omitempty" tf:"anonymous_connections_enabled,omitempty"`

	// An event_handler block as defined below.
	// +kubebuilder:validation:Optional
	EventHandler []EventHandlerParameters `json:"eventHandler,omitempty" tf:"event_handler,omitempty"`

	// The name of the Web Pubsub hub service. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Specify the id of the Web Pubsub. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/signalrservice/v1beta1.WebPubsub
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	WebPubsubID *string `json:"webPubsubId,omitempty" tf:"web_pubsub_id,omitempty"`

	// Reference to a WebPubsub in signalrservice to populate webPubsubId.
	// +kubebuilder:validation:Optional
	WebPubsubIDRef *v1.Reference `json:"webPubsubIdRef,omitempty" tf:"-"`

	// Selector for a WebPubsub in signalrservice to populate webPubsubId.
	// +kubebuilder:validation:Optional
	WebPubsubIDSelector *v1.Selector `json:"webPubsubIdSelector,omitempty" tf:"-"`
}

// WebPubsubHubSpec defines the desired state of WebPubsubHub
type WebPubsubHubSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WebPubsubHubParameters `json:"forProvider"`
}

// WebPubsubHubStatus defines the observed state of WebPubsubHub.
type WebPubsubHubStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WebPubsubHubObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WebPubsubHub is the Schema for the WebPubsubHubs API. Manages the hub settings for a Web Pubsub service.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type WebPubsubHub struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WebPubsubHubSpec   `json:"spec"`
	Status            WebPubsubHubStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WebPubsubHubList contains a list of WebPubsubHubs
type WebPubsubHubList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WebPubsubHub `json:"items"`
}

// Repository type metadata.
var (
	WebPubsubHub_Kind             = "WebPubsubHub"
	WebPubsubHub_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WebPubsubHub_Kind}.String()
	WebPubsubHub_KindAPIVersion   = WebPubsubHub_Kind + "." + CRDGroupVersion.String()
	WebPubsubHub_GroupVersionKind = CRDGroupVersion.WithKind(WebPubsubHub_Kind)
)

func init() {
	SchemeBuilder.Register(&WebPubsubHub{}, &WebPubsubHubList{})
}
