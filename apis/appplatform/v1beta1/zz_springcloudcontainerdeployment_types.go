/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SpringCloudContainerDeploymentObservation struct {

	// The ID of the Spring Cloud Container Deployment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SpringCloudContainerDeploymentParameters struct {

	// A JSON object that contains the addon configurations of the Spring Cloud Container Deployment.
	// +kubebuilder:validation:Optional
	AddonJSON *string `json:"addonJson,omitempty" tf:"addon_json,omitempty"`

	// Specifies the arguments to the entrypoint. The docker image's CMD is used if not specified.
	// +kubebuilder:validation:Optional
	Arguments []*string `json:"arguments,omitempty" tf:"arguments,omitempty"`

	// Specifies the entrypoint array. It will not be executed within a shell. The docker image's ENTRYPOINT is used if not specified.
	// +kubebuilder:validation:Optional
	Commands []*string `json:"commands,omitempty" tf:"commands,omitempty"`

	// Specifies the environment variables of the Spring Cloud Deployment as a map of key-value pairs.
	// +kubebuilder:validation:Optional
	EnvironmentVariables map[string]*string `json:"environmentVariables,omitempty" tf:"environment_variables,omitempty"`

	// Container image of the custom container. This should be in the form of <repository>:<tag> without the server name of the registry.
	// +kubebuilder:validation:Required
	Image *string `json:"image" tf:"image,omitempty"`

	// Specifies the required instance count of the Spring Cloud Deployment. Possible Values are between 1 and 500. Defaults to 1 if not specified.
	// +kubebuilder:validation:Optional
	InstanceCount *float64 `json:"instanceCount,omitempty" tf:"instance_count,omitempty"`

	// Specifies the language framework of the container image. The only possible value is springboot.
	// +kubebuilder:validation:Optional
	LanguageFramework *string `json:"languageFramework,omitempty" tf:"language_framework,omitempty"`

	// A quota block as defined below.
	// +kubebuilder:validation:Optional
	Quota []SpringCloudContainerDeploymentQuotaParameters `json:"quota,omitempty" tf:"quota,omitempty"`

	// The name of the registry that contains the container image.
	// +kubebuilder:validation:Required
	Server *string `json:"server" tf:"server,omitempty"`

	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Container Deployment to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/appplatform/v1beta1.SpringCloudApp
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	SpringCloudAppID *string `json:"springCloudAppId,omitempty" tf:"spring_cloud_app_id,omitempty"`

	// Reference to a SpringCloudApp in appplatform to populate springCloudAppId.
	// +kubebuilder:validation:Optional
	SpringCloudAppIDRef *v1.Reference `json:"springCloudAppIdRef,omitempty" tf:"-"`

	// Selector for a SpringCloudApp in appplatform to populate springCloudAppId.
	// +kubebuilder:validation:Optional
	SpringCloudAppIDSelector *v1.Selector `json:"springCloudAppIdSelector,omitempty" tf:"-"`
}

type SpringCloudContainerDeploymentQuotaObservation struct {
}

type SpringCloudContainerDeploymentQuotaParameters struct {

	// Specifies the required cpu of the Spring Cloud Deployment. Possible Values are 500m, 1, 2, 3 and 4. Defaults to 1 if not specified.
	// +kubebuilder:validation:Optional
	CPU *string `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// Specifies the required memory size of the Spring Cloud Deployment. Possible Values are 512Mi, 1Gi, 2Gi, 3Gi, 4Gi, 5Gi, 6Gi, 7Gi, and 8Gi. Defaults to 1Gi if not specified.
	// +kubebuilder:validation:Optional
	Memory *string `json:"memory,omitempty" tf:"memory,omitempty"`
}

// SpringCloudContainerDeploymentSpec defines the desired state of SpringCloudContainerDeployment
type SpringCloudContainerDeploymentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SpringCloudContainerDeploymentParameters `json:"forProvider"`
}

// SpringCloudContainerDeploymentStatus defines the observed state of SpringCloudContainerDeployment.
type SpringCloudContainerDeploymentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SpringCloudContainerDeploymentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SpringCloudContainerDeployment is the Schema for the SpringCloudContainerDeployments API. Manages a Spring Cloud Container Deployment.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SpringCloudContainerDeployment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SpringCloudContainerDeploymentSpec   `json:"spec"`
	Status            SpringCloudContainerDeploymentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SpringCloudContainerDeploymentList contains a list of SpringCloudContainerDeployments
type SpringCloudContainerDeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SpringCloudContainerDeployment `json:"items"`
}

// Repository type metadata.
var (
	SpringCloudContainerDeployment_Kind             = "SpringCloudContainerDeployment"
	SpringCloudContainerDeployment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SpringCloudContainerDeployment_Kind}.String()
	SpringCloudContainerDeployment_KindAPIVersion   = SpringCloudContainerDeployment_Kind + "." + CRDGroupVersion.String()
	SpringCloudContainerDeployment_GroupVersionKind = CRDGroupVersion.WithKind(SpringCloudContainerDeployment_Kind)
)

func init() {
	SchemeBuilder.Register(&SpringCloudContainerDeployment{}, &SpringCloudContainerDeploymentList{})
}
